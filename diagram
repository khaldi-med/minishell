Here’s a focused, high-level tour of your shell’s core logic, showing how the pieces fit together and then walking through the example ls -la | cat main.c>>test. 

––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––  
1. Core Components & Call Graph  
––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––  

main  
 └─ initialize_shell  
 └─ setup_signals  
 └─ shell_loop  
      └─ readline  →  add_history  
      └─ parse_input  
           └─ ft_split(…, “;”) → for each chain → execute_logical_chain  
                └─ detect && / || → (recursion) or → execute_command_chain  
                     └─ check_cmd / syntax checks  
                     └─ count_pipes → num_cmd  
                     └─ ft_split(…, “|”) → args_pip[]  
                     └─ select_struct2  (allocate t_cmd structs)  
                     └─ select_struct3  (tokenize command, args, note redirections)  
                     └─ check_red_env  (open files, build redirection list)  
                     └─ execute_commands  
                          ├─ if num_cmd == 1 → execve_builtin_or_external  
                          └─ if num_cmd > 1 → execute_pipeline  
                               ├─ for each pipe segment:  
                               │    ├─ pipe()  
                               │    ├─ fork child → dup2 stdin/stdout → execve  
                               │    └─ parent closes fds, waits  
                               └─ return last exit status  
                     └─ cleanup_command  
           └─ free(ft_split result)  
 └─ cleanup_shell  

––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––  
2. Function Roles, in Brief  
––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––  

• initialize_shell  
  • Builds a linked-list of env vars, then an envp array for execve.  
  • Sets up your t_bash state.  

• shell_loop  
  • Print prompt, read input, history, dispatch to parser, repeat until EOF.  

• parse_input  
  • Splits on ;, iterates chains → execute_logical_chain.  

• execute_logical_chain  
  • Handles && and ||, recursing on sub-commands or deferring to execute_command_chain.  

• execute_command_chain  
  • Syntax-checks, splits on |, allocates t_cmd structures, populates them, calls execute_commands.  

• select_struct2 / select_struct3  
  • select_struct2: allocate and assign raw command strings.  
  • select_struct3: tokenize by whitespace, detect <, >, >>, record redirections in each t_cmd.  

• check_red_env  
  • For each t_cmd, opens files (O_RDONLY for <, O_CREAT|O_TRUNC or O_APPEND for >/>>), stores fds.  

• execute_commands  
  • If a single t_cmd, simply fork/exec or handle builtin in-process.  
  • If multiple, calls execute_pipeline.  

• execute_pipeline  
  • Chains forks with pipe() calls, wiring stdout of one child to stdin of the next, applying redirections on the end segments.  

• cleanup_command / cleanup_shell  
  • Frees all malloc’d structures, lists, arrays, resets for the next command.  

––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––  
3. High-Level Flow Diagram  
––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––  

 User types  
 ┌────────────────────────────────────────────────────┐  
 │  “ls -la | cat main.c>>test”                      │  
 └────────────────────────────────────────────────────┘  
             ↓ readline() → input string  
             ↓ parse_input  
         [ no ; ] → execute_logical_chain  
         [ no &&/|| ] → execute_command_chain  
             ↓ count_pipes = 2  
             ↓ ft_split → ["ls -la", "cat main.c>>test"]  
             ↓ select_struct2/3 →  
                t_cmd[0]: { cmd="ls", args=["ls","-la"],  no redir }  
                t_cmd[1]: { cmd="cat", args=["cat","main.c"], out_redir: {file="test", mode=O_APPEND} }  
             ↓ check_red_env  
                open("test", O_CREAT|O_APPEND, 0644) → fd = X  
                store in t_cmd[1].out_fd = X  
             ↓ execute_commands → detect num_cmd>1 → execute_pipeline  

       ┌───────────────┐        ┌──────────────┐  
       │ child #1 fork │        │ child #2 fork │  
       │ – dup2(pipe[1])│  →     │ – dup2(pipe[0])│  
       │ – execve("ls") │        │ – dup2(X)      │  
       └───────────────┘        │ – execve("cat")│  
              ↓                └──────────────┘  
       ┌─────────────────────────┐      ↓  
       │ parent closes pipes,    │  output of cat appends to “test”  
       │ waits on both children  │  
       └─────────────────────────┘  
             ↓ return last exit status  
             ↓ cleanup_command  
             ↓ prompt for next command  

––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––  
4. Example Walk-Through: “ls -la | cat main.c>>test”  
––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––  

1) Input & Prompt  
   • shell_loop calls readline("minishell$ ").  

2) Parsing  
   • parse_input sees no ; → hands full string to execute_logical_chain.  
   • No &&/|| → calls execute_command_chain.  

3) Command Chain Setup  
   • count_pipes("…") returns 2 commands.  
   • ft_split(str, '|') → args_pip = ["ls -la", " cat main.c>>test"].  

4) Struct Population  
   • select_struct2 allocates t_cmd *s_cmd[2].  
   • select_struct3 for each segment:  
     – Segment 0 → tokenizes into ["ls","-la"]  
     – Segment 1 → sees >>test, strips to tokens ["cat","main.c"] + records out_redir.append="test".  

5) Redirection Setup  
   • check_red_env opens test with O_CREAT|O_APPEND, stores new fd in s_cmd[1].  

6) Pipeline Execution  
   • execute_commands sees num_cmd>1 → calls execute_pipeline.  
   • Creates one POSIX pipe.  
   • Forks Child1:  
     – dup2(pipe_write, STDOUT) → runs execve("ls", ["ls","-la"], envp).  
   • Forks Child2:  
     – dup2(pipe_read, STDIN) → dup2(fd_test, STDOUT) → runs execve("cat", ["cat","main.c"], envp).  
   • Parent closes fds, waits both children.  

7) Cleanup & Return  
   • execute_pipeline returns last child’s status.  
   • execute_commands returns that.  
   • execute_command_chain returns it.  
   • parse_input sets g_exit_status and frees.  
   • Shell loops back for the next prompt.  

––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––  
